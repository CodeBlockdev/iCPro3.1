iFox   =============================
      __  _______
     /_/ / _____/
    __  / /___  ______  __  ____
   / / / ____/ / __  / /_ |/ __/
  / / / /     / /_/ / __/   /_
 /_/ /_/     /_____/ /___/|__/ by Alexander Rath (that's me)
=============================

[TODO]: (Elements like " xx: ... " have not been done yet,
                      "~xx: ...~" have been denied for now,
                      "!xx: ...!" have been denied forever,
                      ">xx: ...<" have been done but was not tested and
                      "[xx: ...]" have been done and tested)
                      
 00: How 'bout a new Design for the Changelog? (Or even HTML ^_^)
 01: The SettingsManager is written terribly... It perhaps needs a Rewrite!
~02: How 'bout shorten Classes? A base Class like ShortenClass and then a few Extends would do the Job (including a Variable for the original Class) | New Idea: Wrapper Class~
[03: Improve the HTML2UNIX Function (eG making it faster by using my own Loop instead of str_replace) and disable it for Windoof Users]
 04: How 'bout putting the Arrays out of Functions, so they dont have to be regenerated and then be thrown out by the GarbageCollector all the time
[05: Stop Starting every 2nd Todo with "How 'bout"]
[06: How 'bout adding a RemoveStream/RemoveFormating Function to the Debugger? :)]
 07: Rewrite the XMLParser.php
[08: How 'bout testing the TimeoutManager]
[09: Rewrite the Buffer System of iServer.php (Perhaps with explode()?)]
 10: Rewrite the *whole* SOCKS5 System. Perhaps make it OOP and further, make the fproxopen Function more like fsockopen (Especially the Parameters)
[11: Start actually doing the TODO's]
 12: How about Array Possibilities in iServer::SendGlobalPacket -> $leaveOut
[13: AutoLoad of Classes doesnt work in CLI - Or does it?]
 14: Start writing some Documentations
>15: Perhaps make the SO_REUSEADDR optional? Or use Flags at all?<
 16: !!! Rewrite 2011 !!!
 17: ANSI Terminal Support

January the 18th of 2011 / NOTICED { I noticed something :s }
  Hey, its me, duh.
  Today I was doing some research on ANSI Terminals (VT100 and VT52) and noticed that \033 escaping
  basicly has nothing to do with the OS.
  Thus I will have to replace the IsUnix Function with a function checking wheter its an ANSI Terminal or not.
  I will at that to the TODO List

January the 13th of 2011 / BACK { From a pretty long "vacation" } [ Why // Comment //? I know you can't escape // without LF, but it looks nicer :)]
  Well, if you look at the changelog you might be thinking I haven't been working on iFox a long time...
  BUT: I did :) I just negled to document it.
  Either way, I have been adding a new class which might soon replace the EventListener...
  Its called (drumroll) PUBLISHER!
  
  wtf is Publisher? (Although I know wtf isn't a good expression for an official changelog, I just felt like writing it :) )
  =================
  Publisher is a "base class" that gives you the following methods:
  - addListener
  - removeListener
  and
  - dispatchEvent
  
  If I might ever be starting the class documentation, you can get the details there.
  For now, just take a guess what these methods do :)
  
  Beside that:
  I have been improving my "languages"
  - Ruby: I am now way better at Ruby :)
  - German: I have decided to analyse German a little more with my project "iAzuBOT" and came to a "magic grammar" point
  - English: Perhaps you might have already noticed it, perhaps not. But I am not writing english different and "thinking" it different.
  - General Coding: Yet again college has taught me a lot this semester - a lot of neat stuff I can put into my code ;D
  
  Oh and... happy new year... I know it's quite late.
  Atleast I am not a lier, who is going to write an entry below faking the date...
  
  PS: There will be a "REWRITE 2011", I already added that to the TODO list.
  I will make more examples aswell and clean up a little :)

July the 20th of 2010 / NOTICE { Debugger Bug fixed... }
  Just fixed another Bug.
  <reset> wasnt working due to 0 equaling to false when not checking strictly.
  Now it checks for === NULL and <reset> is working again ^_^
  
  Further I added a new Function to CoreUtils: str2hex!
  What does it do?
  It does <? trim(str_replace('X', 'x', strtoupper(call_user_func_array('sprintf', array(str_repeat('0x%02x ', strlen($str))) + array_map('ord', str_split(' ' . $str)))))); ?>
  
  What does that do?
  eG:
  
  $str = "\000Cake\075\n";
  echo str2hex($str);
  
  Will output
  "0x00 0x43 0x61 0x6B 0x65 0x3D 0x0A"

July the 19th of 2010 / MINOR BUGFIX { Driving home... }
  Hey,
  just fixed an annoying Bug in the Debugger.
  Now stuff like <test> won't be removed.
  
  Previously it thought that <test> should be parsed,
  but then failed at retrieving the \E[ Code.
  
  By the way, did you ever noticed that it costs 2,30€ to get from Germany to France but 4,00€ to get from France to Germany?
  Weird, eh? Think about it >.>
  
  [EDIT]:
  And I added support for iServer::AddSocket($yourSocketHere);
  Which means now you can add your own Socket... Sooner I will most likely add UDP :)
  Yet another TODO done ^_^ (TODO #15)

July the 18th of 2010 / NOTICE { Still in Vacation... }
  Well, tomorrow I will be back home (and therefore be able to focus a little more on iFox), .:BUT:.
  I added a new Feature today, too :)
  
  Its about the Debugger.
  The Debugger::LevelToString Function is now based on the same Principe as the CoreUtils::RetrieveEnum Function :) (ReflectionClass)
  
  Anyway, it now even supports multiple Flags ;)
  For Example:
  
  Debugger::Debug(DebugFlags::INFO | DebugFlags::FINEST, 'Blah');
  Will show the Level as "INFO | FINEST"
  
  Stuff like D_ALL will be returned as D_ALL, too ;)
  
  !! EDIT !!:
   Okay, I just checked TODO #9 and it works fine ^_^
   So, thats done, too, and I will do a few Checks for Memory Usage now ;)
   Afterwards I will check TODO #6.
  
   !! LIVE UPDATE #1 !!:
    Its 20:26:50 now and with help of the PHP Interactive Mode I just had to enter some Code into the Shell
    to check wether the Memory Usage was good or not.
    
    The Result: The Memory Usage is GOOD ^_^
    Which means, after disconnecting a Client, *all* its Resources are blown away.
    Which means, NO MEMORY LEAK :D
    
    Anyway, I will check TODO #6 now
    
    !! LIVE UPDATE #2 !!:
    Its 20:41:30 now and I fixed a Bug and applied a Speed Improvement.
    Actually I just applied a Speed Improvement, and it fixed the Bug...
    
    But whatever, its working now ;)
    I checked AddStream/RemoveStream and AddFormating/RemoveFormating with both ID and Stream as Parameter ^_^
    
    Everythings working.
    BTW: Added two new TODO Types: ~ and !
  
  Anyway, thats it for today.
  ~Cya

July the 16th of 2010 / NOTICE { All 8 of 8 Encoding/Decoding Functions done }
  Hey, yea, still Vacation, but I wanted to fix a Bug,
  which has already existed like YEARS.
  
  Anyway, now its fixed and you can Encode XML ^_^
  Great, eh? I just forgot to call self::$encoder->openMemory(); xD
  
  Well, now it works and I will think of a few other Packet Encoding/Decoding Algorithms.
  Lemme Google, wait...
  
  Mmkay. Just added YAML Support...

July the 13th of 2010 / NOTICE { TimeoutManager Bugfix... }
  Hey, althought its Vacation I managed to get a few Bugs fixed.
  Lets start of with the TimeoutManager Bug - Intervals were just working perfect,
  but sadly Timeouts didnt.
  
  Obviously you cannot unset References (Atleast not by using unset, I will try if NULL-Setting works)
  
  Anyway, Timeouts are working just fine now, I tested it :)
  That just made TODO #08 done (And btw, TODO #13 is done, too)
  
  By the way - Nice Greetings from France.
  I really have to say the People here are pretty nice ^_^
  (We are here on a Houseboat)
  
  - Alex
  
  [EDIT: I checked it. Yes, unset() only empties the Variable specified, not the References to it.
         BUT: You can do $reference = NULL; and all will be set to NULL]

July the 9th of 2010 / NOTICE { EngineLoader has AutoLoading now! }
  Anyway, I just thought of a cool Feature, and that Idea came up in my mind:
  AUTOLOADING! But I wasnt sure if it worked on CLI, since I didnt use it to often yet.
  (The last time I've used it was YEARS ago)
  
  Anyway, I looked it up on php.net and just found out: "HEY! It just doesnt work in Interactive Mode!"
  So well, uCanHazAutoLoadifiying now.
  
  I will sooner give the Ability to costumize it a little.
  (For Example, autoloading Overriding, AddOn autoloading and Stuff like that)
  
  btw: By doing TODO #5, #6 and #13; I actually did #11 finally too ^_^
  Further, I actually worked a little on the TODO-List Style and Meaning (Added the >xx: ...< Option and a Header Notice)
  
  Stay tuned,
  - Alex

July the 9th of 2010 / NOTICE { Some Bugfixes }
  Hey,
  
  Today I got a few Suggestion for iFox by Charles.
  1. The Debugger now sets the Timezone instead of using the @ Operator for date Operations (Much cleaner, better and perhaps even faster?)
  2. iServer now does SO_REUSEADDR (This fixes the annoying but when the Server crashes and you have to restart it and you get "Address already in use")
  
  Anyway, added a Todo/15 for it.
  
  Cya
  - Alex
  
July the 9th of 2010 / NOTICE { CoreUtils::RetrieveEnum rewritten... }
  Hey,
  
  I rewrote the RetrieveEnum Version. Here a Comparsion of the Old Version vs. the New Version:
   Meanwhile the old Version did not check for Errors, the new one does.
   Meanwhile the old Version was written ugly, the new one isnt.
   Meanwhile the old Version used eval, the new one doesnt.
   Meanwhile the old Version used old Techniques, the new one uses newer ones.
   
  Anyway, the new Version is based on ReflectionClass and uses the ReflectionClass::getContants() Function.
  It does that in a try { ... } catch(...) { ... } Statement of course and outputs - on Failure - a Warning.
  
  By the way, I remember the Times when I used to think of ShortCut Classes?
  Well, you can make them yourself thought (Take a look at http://www.php.net/manual/en/function.class-alias.php).
  Further, if you still dont like the length of the Class Functions - I will perhaps write a Class for that soon.
  You will be able to load it then via the EngineLoader.
  
  Anyway, cya
  - Alex

July the 8th of 2010 / NOTICE { AvatarChatExample... }
  Hey,
  
  I took some time to refresh the AvatarChatExample.
  You might remember the amount of major Changes taken in the last time.
  These caused the AvatarChatExample to stop working.
  I found a lot of Bugs anyway, all have been fixed now ;)
  
  Anyway, beyond that, I added a Feature to the SendGlobalPacket in iServer.
  Its ParameterList is now
  
  bool iServer::SendGlobalPacket(string $packet[, bool $appendEscapeCharacter = true[, integer $leaveOut]]);
  
  The $leaveOut Parameter is new.
  It specifies which ClientID should not receive the Packet.
  
  This is useful when - for example - a Client #1 sent a Message, but since Client #1 already knows it (It sent it, duh) only the others should receive it.
  Which means $leaveOut = 1
  
  And last but not least,
  iServer has now a Function called SendPacket.
  
  You can now send a Packet to just a single ClientID, without having to access the iServer::$clients Array.

July the 8th of 2010 / NOTICE { iClient... }
  iClient now has its own sendPacket Function.
  Further it will be made compatible with the EventListener (perhaps).

July the 6th of 2010 / NOTICE { Something new for iClient... }
  iClient has something new... SOCKS5!
  Yes, you can now use SOCKS5 Proxies with iClient.
  So - how does it work?
  
  There is a Function called setProxy (I will explain why there is no OOP later).
  You have to call it with the Proxy IP and Port before you use a Proxy...
  
  The main Function for this is - fproxopen!
  Its a Parody of fsockopen, therefore there is no OOP.
  Further, you might ask... so what shall I do now?
  
  1. Load Engines::SOCKS with the EngineLoader
  2. Before connecting anything via SOCKS5 at all, you have to call setProxy($func_proxyIP, $func_proxyPort); before
  3. Before connecting your iClient class you have to set $this->useProxy = true;
  4. Just do $this->connect(...); like always and be surprised when your Hosts thinks you are somebody else!
  
  Anyway, its still quite Buggy and it misses a lot of Features... I will add that to the Todo list

July the 6th of 2010 / BUGFIX { EventListener working again... }
  Hey guys,
  
  After the switch to the CoreUtils, I made a little mistake in the EventListener.
  This little Bug turned out to be a huge one, as it didnt allow adding Events anymore.
  Well, its fixed now, and you can use the EventListener again ^_^
  
  - Alex

July the 5th of 2010 / NOTICE { I've been away quite long... }
  Well, you might remember I was working on iClient... Then I was making a XatClient... It worked... Then I wanted to give it some GUI...
  Worked with nCurses again... And had some cool Ideas... In the End I was making a Tetris Version for Terminal :s
  Anyway, I will focus a little more on Project Langeweile now, so dont worry ;)

July the 2nd of 2010 / MAJOR CHANGE { About the Destination of iFox }
  Well, slowly I notice how iFox drifts away from being a Server Software *only*.
  So I had the Idea... Why not giving iFox something new - like iServer; iClient!
  Then you can make Servers with iFox, Clients, but of course - just ordinary Projects!
  
  The Engine Loader now doesnt load anything - you have to do it yourself!
  Don't worry, you just have to append one Line:
   <?php EngineLoader::LoadServerTemplate(); ?>
  Thats all!
  
  Further, there will (most likely) be a cURL Wrapper Class, allowing you to easily fetch HTML, without having to do anything.
  
  And I have to rewrite the XMLParser.php
  This has 2 major Reasons:
  - Encoder doesnt work
  - Case insensitive parsing

July the 1st of 2010 / NOTICE { The Future ;) }
  Before,
  iFox has always been tested by using php-5.3.0 on i386-apple-darwin10.4.0, but today, I grabbed a few Mins and compiled some newer Version for my MacBook.
  Now I will be testing with php-5.3.2 and php-5.3.99-dev, but also (probably sometimes) with php-5.3.0.
  
  I really have to say, php-5.3.99-dev is a nice Speed Improvement compared to php-5.3.2.
  (In some Cases I gathered Speed Improvements between 20% and 66%)
  
  Anyway, I will check out a few Things which might be useful for iFox.
  I planed a few cool things for the Future of iFox ^_^
  
  Anyway, there were a few other Enhancements as well, which care about the PacketAnalizer.
  Today, I had the Idea to make it kind of different, for Example the Return Value of the Decode Function - it now returns the Type!
  You might ask "Why?", but the Answer is slightly simple (Example Code):
  
  <?php
  
    switch(PacketAnalizer::Decode($func_myPacket)) {
      case PacketTypes::XT_PACKET: $this->handleXTPacket($func_myPacket);
      ...
    }
    
  ?>
  
  Sometimes this might be really useful!
  Since $func_data is passed as Resource, you dont need the Return Value (Well, not too much, I suppose the Type is used more)

June the 28th of 2010 / NOTICE { Debugger::HTML2UNIX rewritten }
  Now renderinin
   <!green>This<!normal> is a <b>test</b> to <u>check</u> <inv>how long</inv> it <blink>takes</blink> to <key>render this.</key>
  on a MacBook Pro 15" with 4GB RAM and Intel Dual Core @ 2.53GHz just takes around 200 Microseconds. Cool, eh?
  Cuz now, the Debugger even allows Colors ^_^
  
  Now the HTML2UNIX Function even supports Colors :)
  But anyway, here a list of all working Tags:
    reset,  b,  key,  u,  blink,  inv,  inverse
   /reset, /b, /key, /u, /blink, /inv, /inverse
   !black, !red, !green, !yellow, !purple, !pink, !lightblue, !white, !normal
   ?black, ?red, ?green, ?yellow, ?purple, ?pink, ?lightblue, ?white, ?normal
   
   (Writing an ! infront of a Color will make it the Foreground Color, a ? will make it the Background Color)
   (Noticing there are no Escape tags for Colors like </!green> - you will have to use <!normal> to get back to the normal Color)
  
  Further, iFox has a kinda Renewed Design :)

June the 27th of 2010 / NOTICE { TimeoutManager rewritten }
  Okay guys,
  the TimeoutManager is now rewritten and will be tested very soon.
  I will add a [TODO]-List at the Top now, because there are a few things I would forget otherwise.
  
  The CoreUtils begin getting a real important Core Util for iFox :)
  Anyway... Cya

June the 27th of 2010 / NOTICE { Growl Support / New Engines / Engine Major Change }
  Hey there,
  I decided to give the EngineLoader.php a fresh OOP Wind to give it the ability to load optional Engines.
  Why? Because there are now a few optional Engines :)
  This includes:
  - TimeoutManager
  and
  - SettingsManager
  
  Both will have to be "kind of" rewritten, as both were taken out of the latest iFox Test Project. //DevNote: Add ordinary Timeouts to the TimeoutManager (not Intervals)
  Anyway, they were added as optional Engines because a new Project just started :)
  
  Anyway, I worked a little on the Debugger.php...
  It now supports costum Formatings :)
  
  Forexample, you can say:
   When writing to the File xyz use THIS Formating
   (Where THIS is a Function getting the Arguments $func_level, $func_message and $func_reset = true)
   
   More about this will be documented in the Debugger.php Documentation.
   
  Further, the "Enums" in the Debugger where appended :)
  Now you can use SEVERE, WARNING, FINER, ect. instead of J_SEVERE, J_WARNING, J_FINER, ect.
  Additionally, you can leave out the DebugFlags:: infront of it.
  (No, there are *NO* global Constants, but not existing Constants will be taken as String)
  
  This works with the EngineLoader, too, btw...
  This is done by the CoreUtils::RetrieveEnum('Interface', 'CONSTANT'); Function.
  
  The CoreUtils is a freshly added Class that will (hopefully) be documented soon ^_^

June the 26th of 2010 / NOTICE { Added a cool Feature }
  Well, this Post just tells you about a freshly added Feature: Growl Support!
  You can make Growl Notifications in three different Ways:
   //... Doing it with a Stream ...//
    $fp = fopen('growl://abc:passwort@127.0.0.1:9887/PHP Growl', 'r');
    fwrite($fp, "Title\000Stream works :)");
    fclose($fp);
    
   //... Doing it with the static Class ...//
    Growl::Init('127.0.0.1', 'passwort');
    Growl::AddNotification('Visitor');
    Growl::Register();
    Growl::Notify('Visitor', 'Title', 'Static works :)');
    
   //... Doing it with an Object ...//
    $growl = new GrowlClient('127.0.0.1', 'passwort');
    $growl->addNotification('Visitor');
    $growl->register();
    $growl->notify('Visitor', 'Title', 'Object works :)');
    
  By the Way, if you didn't know yet:
   I am not sure, but I suppose Stuff like He<b>llo <u>Wor</u>l</b>d! Doesnt work in HTML,
   but in iFox it does :)

June the 26th of 2010 / NOTICE { Back after a LOOOOONG Break }
  Hey, it's me again. Well, there is nobody else you could meet in this Changelog, so its obvious that its me.
  Anyway, what have I been doing?
  I was making a Private Server for a Game, to check if iFox is really good for that... and it turned out:
   Yes! It is (now)!
  
  Well, it was already before, but I improved a few Things... eG
   - The MySQL Wrapper
   - More Stream Supports
  and something IMPORTANT
   - a major Change in the EventListener
   
  So, what changed in this "major EventListener Change"?
  Well, before, every Handler Function received only one Parameter - an Array.
  Now, this Array is being expanded. Example:
   Earlier:
    function Listener($func_args) { list(, $func_clientID, $func_packet) = $func_args;
   Now:
    function Listener($func_event, $func_clientID, $func_packet) {
 
  You might ask why, but well, iFox isnt public anyway, so it doesnt really matter :P
  In my opinion, this just gives a better Enviroment for Developers :) Whatever,
  Till the next Post,
  - Alex

* A long Break here *

May the 21th of 2010 / NOTICE { Learning iTalian }
  Hey, I know - you havent heared (read) of me for a long time right now, but there are reasons for that,
  like there is an App for nearly everything on the iPhone. (No, I dont have one, but an JBen iPod Touch 2G ;)).
  
  Anyway (or as someone I know called 'Andy' would say: Andyway) I am not here to compare stuff to Apple Hardware.
  Of course, I like doing that, but a Changelog is not the right place for that I guess :/
  
  Soooo... What happend?
  A few changes. You now run iFox completly different, you say
    php Main.php FILENAME
    
  Where FILENAME is the Filename of a PHP-File in the Cores Folder...
  
  And there is a new Class called MySQL (::Connect, ::Select, ::Query) and last but not least,
  I am working on a nice bigger Example :) (Atleast bigger than the AvatarChat one... duh)

May the 13th of 2010 / NOTICE { STATUS: Already 7 out of 8 Encoding/Decoding Functions implemented yet }
  While having LP on heavy Rotation I created yet another 'Library' for iFox :)
  PacketAnalizer allows you to Encode to XT, XML, JSON and Serie (serialize() and unserialize())
  It has a Decode Function, too, that automatically figures out with Encryption was used.
  I still have to do the XML Encoding, as XMLWriter sucks so hard that it doesnt even allows you to read the buffer -.-
  
  Here an Example:
    Encode as XT_PACKET:    string(16) "%xt%Hello%World%"
    Encode as XML_PACKET:   string(0) ""                    //Yes, XMLWriter sucks.
    Encode as JSON_PACKET:  string(17) "["Hello","World"]"
    Encode as SERIE_PACKET: string(38) "a:2:{i:0;s:5:"Hello";i:1;s:5:"World";}"
    
    Decoding the XT_PACKET:     array("Hello", "World")
    Decoding the XML_PACKET:    string(0) ""              //Actually works, but the passed Data was wrong. (Look above and you know why)
    Decoding the JSON_PACKET:   array("Hello", "World")
    Decoding the SERIE_PACKET:  array("Hello", "World")
    
    Every of these Decryptions was not told the Encryption Algorithm.
    It was automatically figured out and in 4 out of these 4 cases correct :)

May the 13th of 2010 / NOTICE { STATUS: Already 4 out of 6 Packet Encoding/Decoding Functions implemented yet }
  Finally I got the XMLParser::Encode Method done :) Everything seems to be working, I just have to link
  the output from STDOUT to the RetVal, then everything works like a charm.
  
  Now the only Encoding/Decoding class missing is the XTParser (yet... There might be more soon ;))
  I still have to think about a few more, but I guess XML, JSON and XT are the most used Protocols :)
  
  One last thing would be the way of passing data to xml_encode()... Its the same as you get from xml_decode()!
  Look the code below...

May the 13th of 2010 / NOTICE { STATUS: Already 3 out of 6 Packet Encoding/Decoding Functions implemented yet }
  There was a MAJOR BUGFIX in the XMLParser.php, as it didn't allow you to have multiple Instances of the same type.
  This major Bugfix changed basicly the whole way of outputting the data (and the way parsing the data).
  
  Further, two global Functions were added to match the new Standard *.
    xml_encode($object) //Links to XMLParser::Encode (Coming soon)
    xml_decode($xmlstr) //Links to XMLParser::Decode
    
  * Standard means, I want to give the User same looking Functions:
    json_encode, json_decode    //Provided by PHP
    xml_encode,  xml_decode     //Links to XMLParser
    xt_encode,   xt_decode      //Links to XTParser (Coming soon)
  
  Now, when parsing XML, the results look like this (<xml><test blah="halb"><a>Muha</a><a>hahaha</a></test><test /></xml><xml lol="wut"><xml /></xml>):
  
  Access Examples:
  ================
    var_dump($parsed['XML'][0]['TEST'][0]['A'][1]['<CharacterData />']) writes 'string(6) "hahaha"'
    var_dump($parsed['XML'][1]['<Attributes />']['LOL'])                writes 'string(3) "wut"'
  
  Complete Data-tree:
  ===================
    array(1) {
      ["XML"]=>
      array(2) {
        [0]=>
        array(1) {
          ["TEST"]=>
          array(2) {
            [0]=>
            array(2) {
              ["<Attributes />"]=>
              array(1) {
                ["BLAH"]=>
                string(4) "halb"
              }
              ["A"]=>
              array(2) {
                [0]=>
                array(1) {
                  ["<CharacterData />"]=>
                  string(4) "Muha"
                }
                [1]=>
                array(1) {
                  ["<CharacterData />"]=>
                  string(6) "hahaha"
                }
              }
            }
            [1]=>
            NULL
          }
        }
        [1]=>
        array(2) {
          ["<Attributes />"]=>
          array(1) {
            ["LOL"]=>
            string(3) "wut"
          }
          ["XML"]=>
          array(1) {
            [0]=>
            NULL
          }
        }
      }
    }

  [Output: var_dump()]

May the 12th of 2010 / MAJOR CHANGE
  Hey guys, plans change, and so did this one, too.
  From the idea of making a copy of SFS, I begun thinking of a new way to use this.
  A way for further MMO(RP)G Developers to build their Server and their Client.
  With the Idea of a Personal Server, the Dynamicy increases, but sadly the ease of use decreases.
  But I suppose that makers of MMO(RP)G's know how to program ;) Otherwise they would not be able to make one >.<

May the 7th of 2010 / NOTICE
  Hey there, today I built in iServer, it now allows you to have more than one Server Socket.
  Noticing that I don't care about Compatibility anymore.
  I can guarantee that iFox works with PHP for Unix, but what happens on Windoze... I have no clue.
  
  Some people might discuss that PHP is the same on every OS, but thats just dumb.
  It isnt, for example, did you ever notice the Function 'fnmatch' doesnt exist on Windoze?
  Well, on Unix it does. But its not just about Functions, its how they get handled.
  Because THAT actually depends on the OS, too!
  
  And of course the Performance... PHP on Windoze IS slower, M$ Workers even had to help PHP to make
  it faster on Windoze (Haha, as if M$ Workers know even ANYTHING about Computers)

May the 6th of 2010 / NOTICE
  Okay, I am about to leave as I have to sleep :s
  Its 10:28PM in Germany and tomorrow is school (Yes, we have school on Fridays, and YES, that IS OBVIOUS)
  I am done with the XMLParser and I am suprised I got done really fast... and it works ;) (of course ;))
  Anyway, I am currently working on the Socket Engine - Its gonna be a kind of iServer, just modified
  to allow you add more than one Server Socket.
  Further, it will be modified to fit smoothly in the Enviroment :)
  
  Thats it,
   -Alex

May the 6th of 2010 / NOTICE
  After a few Improvements I am glad to finish the XMLParser Beta (hopefully) today.
  I worked a lot on Speed Improvements, and had to think hard on how to do it right.
  Programming is NEVER easy - especially when it comes to a complex Server Software!
  
  A good Example can be the EventListener. There are thousands of ways how to do it,
  but I had to chose which one is fast and pretty at the same time! Its always very,
  very important to get a good Mix of Readability and Performance, try finding some!
  
  I bet it's atleast as hard as writing all this stuff in the same length of line ;)

May the 4th of 2010 / NOTICE
  Today I had to make a Decision, either to use $userFunc($parmA, $paramB, $paramC, ...) or to use call_user_func($userFunc, $paramA, $paramB, $paramC, ...)
  And I am glad to announce the Winner... who is: CALL_USER_FUNC!
  Altough $userFunc() looks nicer, I am almost 'forced' to use call_user_func, as the - lets call it 'Closure-Way' - doesn´t allow you to call Class Functions.
  I checked this by the following values for $userFunc:
  
                                        'Closure-Way'    call_user_func
  'MyFunction'                               Y                Y
  $MyFunction                                Y                Y
  array('MyClass', 'MyFunction')             N                Y
  MyClass::MyFunction                        N                Y
  
  Noticing that I could have used Check Marks, I used 'Y' for 'Yes, it works' and 'N' for 'No, it doesn´t', so please don´t think of 'Y' as 'Why?'
                                   (^^ I would have to change Encoding for this...)
                                   
  Sorry, but having the risk that somebody wants to pass a Method Callback is a little to big. (As I want to write this completly in OOP, too >.>)